#include <stdio.h>
#include <stdbool.h>

#define P 5
#define R 3

bool isDeadlock(int processes[], int avail[], int max[][R], int allot[][R], int request[][R]) {
    int work[R];
    bool finish[P] = {false};
    bool deadlock = false;
    int count = 0;

    for (int i = 0; i < R; i++) {
        work[i] = avail[i];
    }

    while (count < P) {
        bool progressMade = false;
        
        for (int p = 0; p < P; p++) {
            if (!finish[p]) {

                bool canProceed = true;
                for (int j = 0; j < R; j++) {
                    if (request[p][j] > work[j]) {
                        canProceed = false;
                        break;
                    }
                }

                if (canProceed) {

                    for (int j = 0; j < R; j++) {
                        work[j] += allot[p][j];
                    }
                    finish[p] = true;
                    progressMade = true;
                    count++;
                    break;
                }
            }
        }

        if (!progressMade) {
            deadlock = true;
            break;
        }
    }

    if (deadlock) {
        printf("Deadlock detected! The system is in an unsafe state.\n");
        return false;
    } else {
        printf("No deadlock detected! The system is in a safe state.\n");
        return true;
    }
}

int main() {
    int processes[] = {0, 1, 2, 3, 4};
    int avail[] = {3, 3, 2};


    int max[][R] = {
        {7, 5, 3}, 
        {3, 2, 2},
        {9, 0, 2}, 
        {2, 2, 2},
        {4, 3, 3} 
    };

    int allot[][R] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    int request[][R] = {
        {7, 4, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };


    isDeadlock(processes, avail, max, allot, request);

    return 0;
}
